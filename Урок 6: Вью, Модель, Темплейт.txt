Чтобы **VSCode** не ругался на Джанго, дополним наш файл пользовательских настроек:
```            
  "python.linting.pylintArgs": [ "--load-plugins", "pylint_django" ],
```            
          
## Вью
В предыдущем уроке мы уже определили, что **Вью** — это обычная функция. Джанго связывает каждый URL на сайте с определенным Вью. Как только человек переходит по ссылке, Джанго понимает какой требуется Вью и запускает эту функцию.

Вью бывают двух типов: функциональные — это самая обычная функция которая принимает аргумент запроса *request*. И классовые — основанные на классах и моделях. Вью могут автоматически генерировать страницу со списком товаров магазина; создания, редактирования и удаления этих товаров.

### Функциональные
Начнем с написания самого простого Вью. Открываем файл *shop_app/views.py* и пишем код:

``` 
# импортируем из стандартной сборки Django
from django.http import HttpResponse 

# Стандартный вью — это обычная питон-функция, которая получает аргумент request
def index(request):
    request_method = request.method
    
    ip_address = request.META['REMOTE_ADDR']
    browser_info = request.META['HTTP_USER_AGENT']
    
    response_text = "Тип запроса: {}. IP-адрес: {}. ЮзерАгент: {}".format(request_method, ip_address, browser_info)
    
    return HttpResponse(response_text)
```
Наш Вью получает всю информацию о запросе через аргумент *request*. Это экземпляр встроенного в Django класса **HttpRequest**, который хранит всю информацию о нашем запросе: тип запроса, квери-параметры или данные, информацию об IP или браузере.

[Документация атрибутов Django request](https://docs.djangoproject.com/en/2.0/ref/request-response/#attributes)

В конце Вью обязательно должен вернуть ответ, который отобразится на сайте. Для этого будем использовать стандартный **HttpResponse**. Он также является частью Джанго и мы импортируем его из стандартной библиотеки.   
  
Объект ответа является классом, о которых мы говорили в начале недели. При создании экземпляра класса он принимает аргумент с текстом ответа. Это может быть как обычный текст, так и HTML. После обработки внутри класса он возвращает ответ для браузера.

У HttpResponse есть нескольких разновидностей, например для возвращения JSON можно использовать **JsonResponse**.

[Документация HttpResponse](https://docs.djangoproject.com/en/2.0/ref/request-response/#httpresponse-objects)

[Список всех видов HttpReponse](https://docs.djangoproject.com/en/2.0/ref/request-response/#httpresponse-subclasses)

Помните, что Джанго нужно понять, какой URL ведет на какой Вью? Для этого будем использовать файл *shop_project/urls.py*. Открываем и пишем код:

```          
# стандартный вью для админки
from django.contrib import admin
# модуль Джанго для определения URL'ов
from django.urls import path 
# импортируем наш файл views из shop_app
from shop_app import views 

# говорим Джанго о том, что хотим отображать наш вью на главной странице
# а строчкой ниже, кстати ссылка на нашу админку, про нее позже
urlpatterns = [ 
  path('', views.index, name='index'), 
  path('admin/', admin.site.urls),
]
```
          
        
Массив **urlpatterns** содержит информацию о всех ссылках на нашем сайте. Первым аргументом передается путь **path**, вторым наш Вью, третьим именованное название. Именованные названия нужны, чтобы не запоминать прямую ссылку на на определенный Вью. Можно будет обратиться к ней из кода по этому имени.

Сервер самостоятельно перезагрузится, если запущен. Если выключен, то запускаем. Затем открываем наш URL – `127.0.0.1:8000`. Магия!

### Классовые
Также **Class-Based View** или CBV. Из названия можно догадаться, что они основаны на классах. В какой-то момент разработчики Django решили, что слишком много кода приходится повторять в каждом CBV. И решили сделать набор базовых Вью, которые подходят для каждого сайта.

Они используют классы и наследование, про которые мы говорили в 4 уроке. Работа с ними выглядит так: мы импортируем из Джанго стандартные Классовые-Вью. Создаем свой класс и наследуем от него. Внутри при помощи атрибутов *model*, *template_name*, *context_object_name* настраивается поведение Вью. Так можно создать Вью на основе стандартного **CreateView**, передать туда название Модели и мы получим страницу создания объекта!

Например, для отображения списка товаров мы будем использовать встроенный CBV – **ListView**.

```                        
class ProductListView(generic.ListView): 

  template_name = 'products_list.html' # подключение Темплейта
  context_object_name = 'products' # под каким именем передадутся данные в Темплейт
  model = Product # название подключаемой Модели
```                       
                      
Хм, ничего не понятно. Как это мы подключаем Модель и Темплейт? Что вообще происходит? Давайте разбираться. А к CBV мы еще вернемся.

## Модели
Помните в прошлом уроке говорил, что ООП в Питон используется для абстракции. Так вот Модели тоже используют ООП и Классы.

Модель это абстракция над таблицами баз данных. Что еще за таблицы? Представьте себе обычные таблицы. У них есть поля и сколько угодно записей внутри.

Например медальный зачет олимпиады это тоже таблица. Есть поле для названия страны и количества каждых из медалей.

![Олимпиада](https://api.bluzir.me/media/olimp.png)

Открываем наш файл *shop_app/models.py* и пишем туда код:

```           
# Импортируется родительский класс моделей            
from django.db import models 

# Создаем базовую модель нашего продукта
class Product(models.Model): 
  title = models.CharField(max_length=200) # и указываем максимальную длину
  description = models.TextField(max_length=5000)
```           
          
Что мы только что сделали? Импортировали стандартный класс Модели из Джанго *— django.db.models*. Затем создали свою модель с наследованием от стандартной. Атрибуты класса в данном случае это поля таблицы. Значения полей мы тоже берем из *django.db.models* и настраиваем под себя.

Так атрибут *max_length* отвечает за максимальную длину поля. А *unique* за то, что все значения должны быть уникальны.

[Спискок атрибутов полей Джанго моделей](https://docs.djangoproject.com/en/2.0/ref/models/fields/#field-options)

[Список возможных полей Джанго-моделей](https://docs.djangoproject.com/en/2.0/ref/models/fields/#field-types)

Чтобы использовать Модели нам нужно «рассказать Джанго», что мы хотим использовать наше новое приложение. Идем в файл *shop_project/settings.py* и ищем там словарь **INSTALLED_APPS**.

Это словарь со всеми установленными приложениями в вашем проекте. Там уже есть несколько стандартных Django-приложений. Добавляем над стандартными приложениями **`'shop_app.apps.ShopAppConfig'`** — теперь Джанго узнает, что мы хотим использовать наше новое приложение.

### Миграции
Помните, что Модели это абстракции над таблицами базы данных? Чтобы Модели превратились в таблицы базы данных нам нужны миграции. Это скрипты на Питоне, которые смотрят на то, как изменились Модели и вносят эти изменения в базу данных.

Кстати, в Питоне идет своя база данных из коробки — SQLite. Она компактная и хорошо подойдет для наших задач. Джанго автоматически настроен для работы с ней.

Введем _`python manage.py makemigrations shop_app`_ — мы говорим Джанго создать миграции для нашего приложения. После этого создадутся скрипты-миграции в директории *shop_app/migrations/*.

Чтобы изменения вступили в силу нам нужно их нужно теперь смигрировать — _`python manage.py migrate`_ — миграции прошли, таблица в базе данных создана. Запомните этот процесс: сначала создаем миграции, затем мигрируем. Теперь нам хочется добавить туда информацию, так ведь?

## Админка
Я уже говорил, что в Джанго встроена админка. Это самый простой способ добавлять и удалять данные из моделей. Она доступна по адресу *127.0.0.1:8000/admin*. Но какой логин и пароль?

Для доступа в админку мы можем создать суперпользователя — для этого вводим команду _`python manage.py createsuperuser`_. И вводим нужные нам данные. Не бойтесь, их не украдут.

Потом с этими данными заходим в админку. И видим только ссылки на Groups и Users. А же тут наша модель Product? Чтобы она отобразилась в админке — нужно тоже «сказать об этом Джанго». Идем в файл *shop_app/admin.py* и пишем:

```python            
# импортируем из джанго методы добавления в админку  
from django.contrib import admin 
# импортируем нашу модель
from .models import Product

# говорим админке зарегистрировать нашу модель
admin.site.register(Product)
```            
          
Снова заходим в админку и вот оно. Добавилось наше приложение для продуктов. Мы можем добавлять и удалять товары, но как их вывести на страницу? В этом нам помогут Темплейты.

На данный момент названия товаров и категорий в админке показываются как *Product Object (1)* — это неудобно.

Они так выводятся, потому что Django применяет к объекту класса модели метод **str()**, и по дефолту выводится такое название. К счастью поведение метода **str()** можно переопределить, причем для любого класса в Питоне.

Для этого просто добавляем метод __str__ в класс и определяем там поведение. Для нашей модели продукта мы можем добавить такой метод:

```python                         
def __str__(self):
    return self.title
```                         
                        
## Темплейты
Для вывода данных из Моделей используются Темплейты. Создадим в *shop_app* директорию *templates*. Там мы будем хранить все наши шаблоны приложения.

Для начала нам нужно вывести список товаров. Поэтому создадим там файл *products_list.html*. По основам html будет отдельный урок, сейчас это не так критично. Пишем в наш файл:

```          
{% for product in products %} 
  <h2>{{product.title}}</h2>
  <p>{{ product.description}}</p>
{% endfor %} 
```          
          
Что это такое?! Это Джанго-темплейты, напоминают смесь языка Питон и обычного HTML. В этом файле мы используем цикл for и выводим информацию о каждом продукте.

Остается только связать этот Темплейт с Вью. Для этого мы будем использовать весь MTV-паттерн.

[Документация Джанго-шаблонов](https://docs.djangoproject.com/en/2.0/topics/templates/)

## Используем все вместе
Наши Модели уже готовы, их мы изменять не будем. Давайте отредактируем наш Вью для работы с Моделями.

Я уже говорил, что в Джанго многие вещи сделаны за вас. В том числе для этого придумали СBV. Они используются для стандартизированного вывода информации из Модели — например вывод списка продуктов или конкретного продукта по его ID, страница создания, редактирования или удаления.

Для выведения списка мы будем использовать — **ListView**. Открываем наш файл *shop_app/views.py* — и пишем:

```            
# импортируем модель для CBV            
from django.views import generic 

# импортируем нашу модель
from .models import Product

class ProductListView(generic.ListView): 

  template_name = 'products_list.html' # подключаем наш Темплейт
  context_object_name = 'products' # под каким именем передадутся данные в Темплейт
  model = Product # название Модели
```            
          
Остается немного отредактировать файл в URL *shop_project/urls.py*

```python            
from django.contrib import admin 
from django.urls import path 
from shop import views 

urlpatterns = [ 
  path('', views.ProductListView.as_view(),name='index'), 
  path('admin/', admin.site.urls), 
]
```
           
Заходим на главную и видим как начинают выводится товары, которые мы добавили в админке.

### Контекст
Как шаблон узнал о том, что наши товары называются products и получил их список? Мы передали их в контекст. Это словарь со всей информацией доступной из шаблона. Туда мы и передали наш список товаров.

А что если бы хотели вывести не только категории товаров, но и весь список категорий в шапке.

Detail и List Вью позволяют вывести только одну основную модель в контекст шаблона. Что такое

Стандартно наши Вью передает в контекст только модель, которую мы указали во Вью: **ListView** — передает список объектов модели, **DetailView** — конкретный объект. Кстати, когда мы указываем во Вью **context_object_name**, то как раз задаем название наших объектов в контексте.

В наших Класс-Вью за контекст отвечает метод **get_context_data**. В этом методе вы объявляем контекст и можем передать в него любые питон-объекты, чтобы потом отобразить их в Темплейте.

```python                                
class ProductListView(generic.ListView): 
	template_name = 'product_list.html' 
	# добавляем объекты модели в контекст под этим именем
	context_object_name = 'products' 
	model = Product

# метод для добавления дополнительной информации в контекст
    def get_context_data(self, **kwargs): 
        context = super().get_context_data(**kwargs)
        # передаем в словарь контекста список всех категорий 
        context['categories'] = Category.objects.all()
        return context
```
Теперь в нашем шаблоне со списком продуктов доступен список категорий *{{ categories }}*.

По аналогии с *ListView* мы можем использовать и *DetailView*

Сначала создадим шаблон *product_detail.html*. И кладем туда:


```html            
<h2>{{product.title}}</h2> 
<p>{{ product.description}}</p>
```            
          
Добавляем в наш файл views:

```python            
class ProductDetail(generic.DetailView): 
    template_name = 'product_detail.html' 
    model = Product
```        
      
И добавляем в urls.py в словарь urlpatterns строчку:
```
path('<int:pk>/', views.ProductDetail.as_view(), name='detail'),
```

Теперь каждый наш товар доступен по ссылке: http://127.0.0.1:8000/1/ — где 1 это ID товара.

[Полный список Джанго CBV](https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/)

### Внешний ключ
Иногда нужно связать несколько моделей. Например у товаров может быть также категория. Чтобы связать две модели используется **ForeignKey** — внешний ключ. Это поле в нашей модели, которое ведет на ID другой модели и связывает их. Так мы можем связать модель **Product** и **Category**:

```python            
from django.db import models 
   
class Product(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(max_length=5000, blank=True)
    category = models.ForeignKey('Category', on_delete='CASCADE', null=True) 
  
class Category(models.Model): 
    title = models.CharField(max_length=200)
    description = models.TextField(max_length=5000, blank=True)
```            
          
После добавления изменений не забудьте их смигрировать. Чтобы новая модель появилась в админке ее нужно туда добавить по аналогии с Product

### Связываем модели
Нам нужно будет получить Категорию из самого Продукта. В модели Продукта у нас указан ForeignKey к Категории. Поэтому просто обращаемся напрямую к категории:

                        
    # Выведет название категории
    product.category.title
    # Выведете ID категории
    product.category.id
                    
                  
Если же нам нужно получить список Продуктов из самой Категории, то дела обстоят немного сложнее. В ForeignKey поле модели нужно указать аттрибут related_name и имя по которому мы будем обращаться к продуктам: `related_name="products"`

Теперь из Category мы можем получить доступ к списку Продуктов. Например из шаблона будет выглядеть так:

```                
{% for product in category.products.all %}
	{{product.id}}
{% endfor %}
```
    
          
## Итог
1) Джанго-проект состоит из приложений

А приложение состоит: из *Моделей*, *Вью* и *Темплейтов*.

2) После каждого изменения Моделей нужно сделать **миграции**

3) **ForeignKey** нужен для связи моделей (таблиц в БД)

4) **ClassBasedView** дают нам быстро получать и выводить данные из моделей в Темплейт

### Почитать
[Документация Джанго](https://docs.djangoproject.com/en/2.0/) — ваш новый лучший друг, там есть ответы на все вопросы.

[Русскоязычная документация Джанго 1.9](https://djbook.ru/rel1.9/) — будьте осторожны, есть отличия с версией 2.0